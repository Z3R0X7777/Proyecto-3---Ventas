#PROYECTO 3
from tkinter import *
from tkinter import ttk
import tkinter.filedialog
import tkinter as tk

from PIL import ImageTk,Image
from tkinter import messagebox


#Control de acceso
#----------------------

#Una interfaz de seguridad donde pide usuario y contraseña para poder acceder

#E: Un usuario y contraseña
#S: Si la contraseña es la correcta seguir a la siguiente interfaz
#R: La contraseña y el usuario deben de ser los correctos


def control_acceso(): 
    acceso=Tk()
    acceso.title('Control de Acceso')
    acceso.iconbitmap('seguridad.ico')
    acceso.geometry("595x430")
    acceso.resizable(False,False)
    Inicia=PhotoImage(file='IMGSeguridad.png')
    Label(acceso,image=Inicia).place(x=0 ,y=0)

    #-----
    #Botones//Labels
    Usuario = tk.Entry(acceso) 
    Usuario.place(x=50, y=359)
    Contraseña = tk.Entry(acceso)
    Contraseña.place(x=70, y=400)
    tk.Label(acceso, text="Usuario:").place(x=0,y=359)
    tk.Label(acceso, text="Contraseña:").place(x=0,y=400)

    b1=Button(acceso,text="Ayuda",command=lambda:ayuda()) #Botón que proporciona informacion al usuario 
    b1.place(x=530,y=359)

    b2=Button(acceso,text='Listo',command=lambda:comprueba_datos())
    b2.place(x=530,y=400)
    #-----
    def comprueba_datos():                      #Funcion que valida que entren datos en la interfaz
        U=Usuario.get() #U=usuario
        C=Contraseña.get() #C=contraseña
        if U=="" or C=="":
            messagebox.showinfo(message="Deben de ingresar el nombre de usuario y contraseña, no se premiten datos en blanco.")
        else:
            return control_Usuarios(U,C)    

    acceso.mainloop()

def ayuda():
     messagebox.showinfo(message="Se encuentra en el Sistema de Acceso, para poder continuar debe de Ingresar un nombre de Usuario y contraseña que se encuentren registrados y clickear el en el botón de: Listo")
    
#------------------------------
##Verificador de Contraseña y usuarios 
#E:input(contraseña)
#S: true o false
#R: deben ingresar minimo un dato      
def control_Usuarios(usuario,contraseña):
    if aux_ControlUsuarios(usuario,contraseña)==True:
        print('Pasa a la siguiente interfaz')
    else:
        messagebox.showinfo(message="El Usuario y contraseña no se encuentran registrados")
    
        

def aux_ControlUsuarios(usuario,contraseña):   
    matriz=doc_prueba2('Usuarios_registrados.txt')
    res=False
    for x in matriz:
        if x[1]==usuario and x[2]==contraseña:
            return True
    return res 
#Pantalla principal

def pantalla_principal():
    main=Tk()  #Main=principal
    main.title('Pantalla Principal')
    main.iconbitmap('factura.ico')
    main.geometry("595x430")
    main.resizable(False,False)
    Inicia=PhotoImage(file='principal.png')
    Label(main,image=Inicia).place(x=0 ,y=0)

    #-----
    #Botones//Labels

    b1=Button(main,text="Administración") #Botón que proporciona informacion al usuario 
    b1.place(x=10,y=100)

    b2=Button(main,text='Punto de venta')
    b2.place(x=10,y=140)

    b3=Button(main,text='Salir')
    b3.place(x=10,y=220)

    b4=Button(main,text='Ayuda')
    b4.place(x=10,y=180)


    



    
    main.mainloop()       
#---------------------------
#Categorias

class Categorias:
    total_categorias=[]
    def __init__(self,nombre,codigo):
        if isinstance(codigo,int):
            self.nombre=nombre
            self.codigo=codigo
            Categorias.total_categorias+=[[nombre,codigo]]
        else:
            return 'Codigo no numerico'
        
    def modificar(self,codigo,newCodigo,newNombre):
        if Categorias.total_categorias==[]:
            return 'No hay registros para modificar'
        else:
            res=[]
            verifica=False
            for x in Categorias.total_categorias:
                for y in x:
                    if y==codigo:
                        res+=[[newCodigo,newNombre]]
                        verifica=True
                if verifica==False:  #Verifica si no hay datos que modificar y los agrega a la clase
                    res+=[[x]]
                verifica=False
            Categorias.total_categorias=res
                                   
                

    def listar(self): #Mostrar
        if Categorias.total_categorias==[]:
            return 'No hay registros disponibles'
        else:
            for x in Categorias.total_categorias:
                for y in x:
                    print('Nombre:',y[0])
                    print('Codigo:',y[1])
                    print('\n -----------')
            return 'Listo'
                
    def borrar(self,codigo): #No se puede borrar una categoria que ya se encuentre facturada
        if buscar_coincidencias(Facturacion.facturas,codigo)==False:
            for x in Categorias.total_categorias:
                for y in x:
                    if y==codigo:
                        continue
                    else:
                        res+=[[x]]
            Categorias.total_categorias=res
            return 'Se actualizo con exito'
            
        else:
            return 'Ya se encuentra facturado'


#Facturacion

class Facturacion:
    facturas=[]
    def __init__(self):
        pass
        
#Administracion
#----------------------

#Interfaz de administracion 

#E: 
#S: 
#R: 

def interfaz_administracion():
    global acceso
    global admin
    acceso.destroy()
    admin=Tk()
    admin.title('Sistema de Administracion')
    admin.iconbitmap('factura.ico')
    admin.geometry("960x540")
    #admin.resizable(False,False)
    Inicia=PhotoImage(file='PNTAdmin2.png')
    Label(admin,image=Inicia).place(x=0 ,y=0)
    
    #Botones//Labels

    b1=Button(admin,text="Provedores") 
    b1.place(x=0,y=130)

    b2=Button(admin,text='Productos')
    b2.place(x=0,y=160)

    b3=Button(admin,text="Categoria") 
    b3.place(x=0,y=190)

    b4=Button(admin,text='Clientes')
    b4.place(x=0,y=220)

    b5=Button(admin,text="Ayuda",command=lambda:PNTadmin())  #PNT==Pantalla de carga 
    b5.place(x=0,y=359)


    admin.mainloop()

    
def PNTadmin():
     messagebox.showinfo(message="Bienvenido al apartado de Administracion, para poder continuar seleccione una de las opciones mostradas en la interfaz.")

#/////////

def crear_matriz(lista_tiobe):
    return matriz_aux(lista_tiobe, [])          #Funcion para crear una matriz 

 
def matriz_aux(doc, resu):
    if doc==[]:
       
        return resu
    
    else:
        pos=doc[0].split(',')

        return matriz_aux(doc[1:], resu + [pos])    


def doc_prueba2(paper):
    doc=open(paper,'r+')
    doc_a=doc.read().split('\n')                #Funcion para crear matrices los archivos txt 
    doc.close()
    return crear_matriz(doc_a)

def largo_lista(lista):                         #Funcion para sacar el largo de una lista 
    if lista==[]:
        return 0
    else:
        return 1+largo_lista(lista[1:])

#Busca datos iguales en una matriz
#Entrada: Matriz donde buscar y dato a encontrar
#Salida: True si existe y false si no hay coincidencias
#Restriccion: Solo trabaja con matrices
    
def buscar_coincidencias(matriz,buscar):
    res=False
    for x in matriz:
        for y in x:
            if y==buscar:
                res=True
                break
    return res
    

control_acceso()
